/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jhw.swing.material.components.dashboard.taskpane;

import com.clean.swing.app.dashboard.DashBoardSimple;
import com.clean.swing.app.dashboard.DashboardConstants;
import com.jhw.swing.material.components.container.panel._PanelGradient;
import com.jhw.swing.material.components.taskpane.CollapseMenu;
import com.jhw.swing.material.components.taskpane.TaskButton;
import com.jhw.swing.material.components.taskpane.TaskPaneMainContainer;
import com.jhw.swing.material.standars.MaterialIcons;
import com.jhw.swing.personalization.PersonalizationMaterial;
import com.jhw.swing.util.enums.GradientEnum;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jorge
 */
public class DashBoardTaskPane extends DashBoardSimple {

    private Consumer<TaskButton> buttonFormatter = (TaskButton btn) -> {
    };

    private Consumer<CollapseMenu> collapseMenuFormatter = (CollapseMenu menu) -> {
    };

    private final CardLayout cards = new CardLayout();

    private boolean shrinked;

    private final TaskPaneMainContainer task = new TaskPaneMainContainer();

    private final ArrayList<CollapseMenu> menus = new ArrayList<>();

    private Consumer<CollapseMenu> menuFormatter = (CollapseMenu menu) -> {
    };

    /**
     * Creates new form RootView
     */
    public DashBoardTaskPane() {
        initComponents();
        personalize();
        panelContent.setLayout(cards);
        jPanelMenu.add(task, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings(value = "unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelContent = new javax.swing.JPanel();
        panelSideMenu = new _PanelGradient();
        jPanelBackButton = new javax.swing.JPanel();
        jButtonBack = new javax.swing.JButton();
        jPanelShinkButton = new javax.swing.JPanel();
        jButtonShrink = new com.jhw.swing.material.components.button._MaterialButtonIconTranspRect(MaterialIcons.MENU.deriveIcon(36f));
        jPanelMenu = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        panelContent.setBackground(new java.awt.Color(255, 255, 255));
        panelContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));

        javax.swing.GroupLayout panelContentLayout = new javax.swing.GroupLayout(panelContent);
        panelContent.setLayout(panelContentLayout);
        panelContentLayout.setHorizontalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 960, Short.MAX_VALUE)
        );
        panelContentLayout.setVerticalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 466, Short.MAX_VALUE)
        );

        add(panelContent, java.awt.BorderLayout.CENTER);

        panelSideMenu.setBackground(new java.awt.Color(102, 102, 102));
        panelSideMenu.setLayout(new java.awt.BorderLayout());

        jPanelBackButton.setOpaque(false);
        jPanelBackButton.setLayout(new java.awt.BorderLayout());

        jButtonBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonBack.setMaximumSize(null);
        jButtonBack.setMinimumSize(new java.awt.Dimension(0, 40));
        jButtonBack.setPreferredSize(new java.awt.Dimension(0, 40));
        jPanelBackButton.add(jButtonBack, java.awt.BorderLayout.CENTER);

        panelSideMenu.add(jPanelBackButton, java.awt.BorderLayout.PAGE_START);

        jPanelShinkButton.setOpaque(false);
        jPanelShinkButton.setLayout(new java.awt.BorderLayout());

        jButtonShrink.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jButtonShrink.setMaximumSize(null);
        jButtonShrink.setMinimumSize(new java.awt.Dimension(40, 40));
        jButtonShrink.setPreferredSize(new java.awt.Dimension(40, 40));
        jButtonShrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShrinkActionPerformed(evt);
            }
        });
        jPanelShinkButton.add(jButtonShrink, java.awt.BorderLayout.CENTER);

        panelSideMenu.add(jPanelShinkButton, java.awt.BorderLayout.PAGE_END);

        jPanelMenu.setBackground(new java.awt.Color(0, 0, 0));
        jPanelMenu.setOpaque(false);
        jPanelMenu.setLayout(new java.awt.BorderLayout());
        panelSideMenu.add(jPanelMenu, java.awt.BorderLayout.CENTER);

        add(panelSideMenu, java.awt.BorderLayout.WEST);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonShrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShrinkActionPerformed
        setShrinked(!shrinked);
    }//GEN-LAST:event_jButtonShrinkActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonShrink;
    private javax.swing.JPanel jPanelBackButton;
    private javax.swing.JPanel jPanelMenu;
    private javax.swing.JPanel jPanelShinkButton;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelSideMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(HashMap<String, Object> hm) {
        menus.clear();
        this.task.clear();
        for (String key : hm.keySet()) {
            Object component = hm.get(key);
            switch (key) {
                case DashboardConstants.MAIN_ELEMENT:
                    add(component);
                    break;
            }
        }
        //this.revalidate();
    }

    @Override
    public void deselectAll() {
        for (CollapseMenu menu : menus) {
            menu.deselectAll();
        }
    }

    public Consumer<CollapseMenu> getMenuFormatter() {
        return menuFormatter;
    }

    public void setMenuFormatter(Consumer<CollapseMenu> menuFormatter) {
        this.menuFormatter = menuFormatter;
        for (CollapseMenu menu : menus) {
            menuFormatter.accept(menu);
        }
    }

    private void add(Object component) {
        if (component instanceof CollapseMenu) {
            addMainElement((CollapseMenu) component);
        } else if (component instanceof List) {
            for (Object single : (List) component) {
                if (single instanceof CollapseMenu) {
                    addMainElement((CollapseMenu) single);
                }
            }
        } else {
            String logMSG = "Component " + component + " not supperted by actual DashBoard";
            Logger.getLogger(DashBoardTaskPane.class.getName()).log(Level.WARNING, logMSG);
        }
    }

    @Override
    public void addView(String name, Component compoment) {
        panelContent.add(name, compoment);
    }

    @Override
    public void showView(String name) {
        cards.show(panelContent, name);
    }

    private void personalize() {
        panelSideMenu.setBackground(PersonalizationMaterial.getInstance().getColorPrincipal());
    }

    public void removeBackButton() {
        jPanelBackButton.setVisible(false);
    }

    public void setPanelSideMenuColor(Color background) {
        panelSideMenu.setBackground(background);
        task.setTaskPaneBackground(background);
    }

    public void setShrinked(boolean shrink) {
        this.shrinked = shrink;
        this.task.setCollapsed(this.shrinked);
    }

    public void addMainElement(CollapseMenu menu) {
        menuFormatter.accept(menu);
        menu.selected(false);
        menus.add(menu);
        this.task.addItem(menu);
        setMinimunShrink(menu.getComponentsHight());
    }

    /**
     * Usar directamente el {@code addMainElement}
     *
     * @param menu
     * @deprecated
     */
    @Deprecated
    public void addComponent(CollapseMenu menu) {
        menus.add(menu);
        this.task.addItem(menu);
    }

    public void setMinimunShrink(int min) {
        jButtonShrink.setMinimumSize(new Dimension(min, min));
        jButtonShrink.setPreferredSize(new Dimension(min, min));

        jButtonBack.setMinimumSize(new Dimension(min, min));
        jButtonBack.setPreferredSize(new Dimension(min, min));
    }

    public void setButtonFormatter(Consumer<TaskButton> buttonFormatter) {
        this.buttonFormatter = buttonFormatter;
    }

    public void setCollapseMenuFormatter(Consumer<CollapseMenu> collapseMenuFormatter) {
        this.collapseMenuFormatter = collapseMenuFormatter;
    }

    @Override
    public void format() {
        for (CollapseMenu menu : menus) {
            collapseMenuFormatter.accept(menu);
            for (TaskButton button : menu.getButtons()) {
                buttonFormatter.accept(button);
            }
        }
    }

}

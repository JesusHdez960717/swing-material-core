package com.jhw.swing.material.components.combobox.icbs;

import com.jhw.swing.material.components.button._MaterialButtonSimpleIcon;
import com.jhw.swing.material.components.container.panels._PanelTransparent;
import com.jhw.swing.material.components.textfield._MaterialTextField;
import com.jhw.utils.exceptions.ModelInputErrorException;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import com.jhw.swing.personalization.PersonalizationMaterial;
import com.jhw.swing.util.Utils;
import com.clean.core.utils.Update;
import com.jhw.swing.material.standars.MaterialColors;
import com.jhw.swing.util.validations.Validation;
import com.jhw.swing.util.validations.icbs.ICBSValidation;

/**
 *
 * @author Jesus Hernandez Barrios (jhernandzb96@gmail.com)
 */
public abstract class InputComboBoxSelection<T> extends _PanelTransparent implements Update {

    private String label;

    private boolean showBorder = true;

    //default
    private Color foreground = MaterialColors.BLACK;

    //flags for wrong
    private boolean wrongFlag = false;
    private Color wrongColor = PersonalizationMaterial.getInstance().getColorWrong();
    private String wrongText = "Error en este campo";

    private final ArrayList<ICBSValidation> preValidations = new ArrayList<>();
    private final ArrayList<ICBSValidation> postValidations = new ArrayList<>();

    public InputComboBoxSelection(String label) {
        this.label = label;
        initComponents();
        personalize();

        this.getComboBox().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearWrong();
            }
        });
        clearWrong();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackground = new com.jhw.swing.material.components.container.panels._PanelTransparent();
        comboBox = new javax.swing.JComboBox();
        buttonNuevo = new com.jhw.swing.material.components.button._MaterialButtonSimpleIcon();
        labelWrong = new com.jhw.swing.material.components.labels._MaterialLabel();

        panelBackground.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..." }));

        buttonNuevo.setBackground(new java.awt.Color(0, 153, 0));
        buttonNuevo.setPreferredSize(new java.awt.Dimension(35, 35));

        javax.swing.GroupLayout panelBackgroundLayout = new javax.swing.GroupLayout(panelBackground);
        panelBackground.setLayout(panelBackgroundLayout);
        panelBackgroundLayout.setHorizontalGroup(
            panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackgroundLayout.createSequentialGroup()
                .addComponent(comboBox, 0, 125, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(buttonNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelBackgroundLayout.setVerticalGroup(
            panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBackgroundLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBox)
                    .addComponent(buttonNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        labelWrong.setText("wrong");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(labelWrong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelWrong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.jhw.swing.material.components.button._MaterialButtonSimpleIcon buttonNuevo;
    private javax.swing.JComboBox comboBox;
    private com.jhw.swing.material.components.labels._MaterialLabel labelWrong;
    private com.jhw.swing.material.components.container.panels._PanelTransparent panelBackground;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update() {
        actualizarComboBox();
    }

    private void personalize() {
        buttonNuevo.setBackground(PersonalizationMaterial.getInstance().getColorButtonAdd());
        buttonNuevo.setIcon(PersonalizationMaterial.getInstance().getIconButtonAdd());
        buttonAddAction();
        setLabel(label);
        setAddButtonListener();
    }

    public ArrayList<ICBSValidation> getPostValidations() {
        return postValidations;
    }

    public void addPostValidation(ICBSValidation val) {
        postValidations.remove(val);
        postValidations.add(val);
    }

    public ArrayList<ICBSValidation> getPreValidations() {
        return preValidations;
    }

    public void addPreValidation(ICBSValidation val) {
        preValidations.remove(val);
        preValidations.add(val);
    }

    /**
     * Get the wrong color. The worng color is the color of the component when
     * is wrong.
     *
     * @return the wrong color
     */
    public Color getWrongColor() {
        return wrongColor;
    }

    /**
     * Set the wrong color. The worng color is the color of the component when
     * is wrong.
     *
     * @param wrongColor the wrong color
     */
    public void setWrongColor(Color wrongColor) {
        this.wrongColor = wrongColor;
    }

    public Color getRealForeground() {
        return foreground;
    }

    public void setRealForeground(Color fg) {
        this.foreground = fg;
    }

    public T getSelectedItem() {
        runPreValidations();
        T ans = (T) comboBox.getSelectedItem();
        runPostValidations();
        return ans;
    }

    public void wrong() {
        wrongFlag = true;
        setForeground(wrongColor);
        this.getComboBox().setForeground(getForeground());
        labelWrong.setText(wrongText);
        labelWrong.setForeground(wrongColor);
        setLabel(label);
    }

    public void clearWrong() {
        wrongFlag = false;
        setForeground(foreground);
        this.getComboBox().setForeground(getForeground());
        labelWrong.setForeground(MaterialColors.TRANSPARENT);
        setLabel(label);
    }

    @Override
    public void setEnabled(boolean enabled) {
        comboBox.setEnabled(enabled);
        buttonNuevo.setEnabled(enabled);
    }

    public abstract void actualizarComboBox();

    public abstract ActionListener buttonAddAction();

    protected void setAddButtonListener() {
        buttonNuevo.addActionListener(buttonAddAction());
    }

    public void setSelectedItem(T item) {
        if (item == null) {
            if (comboBox.getItemCount() > 0) {
                comboBox.setSelectedIndex(0);
            }
        } else {
            comboBox.setSelectedItem(item);
        }
    }

    public void setButtonNuevoVisibility(boolean visible) {
        buttonNuevo.setVisible(visible);
    }

    public _MaterialButtonSimpleIcon getButtonNuevo() {
        return buttonNuevo;
    }

    public JComboBox getComboBox() {
        return comboBox;
    }

    public _PanelTransparent getPanelBackground() {
        return panelBackground;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
        panelBackground.setBorder(getRealBorder());
    }

    public boolean isShowBorder() {
        return showBorder;
    }

    public void setShowBorder(boolean showBorder) {
        this.showBorder = showBorder;
    }

    private Border getRealBorder() {
        if (!showBorder) {
            return new EmptyBorder(0, 0, 0, 0);
        }
        Font font = getComboBox().getFont();
        Color lineColor = !wrongFlag ? Utils.applyAlphaMask(getForeground(), _MaterialTextField.LINE_OPACITY_MASK) : getForeground();
        TitledBorder border = new TitledBorder(new LineBorder(lineColor), this.label, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, font, getForeground());
        return border;
    }

    /**
     * Get the wrong text. The worng text is the text to display with the
     * explanaition of the error.
     *
     * @return the wrong color
     */
    public String getWrongText() {
        return wrongText;
    }

    /**
     * Set the wrong text. The worng text is the text to display with the
     * explanaition of the error.
     *
     * @param wrongText the wrong text
     */
    public void setWrongText(String wrongText) {
        this.wrongText = wrongText;
    }

    public void clearPreValidations() {
        preValidations.clear();
    }

    public void clearPostValidations() {
        postValidations.clear();
    }

    public void clearAllValidations() {
        preValidations.clear();
        postValidations.clear();
    }

    private void runPostValidations() {
        for (Validation v : postValidations) {
            if (!v.validate(this)) {
                setWrongText(v.getWrongText());
                wrong();
                throw new ModelInputErrorException(v.getDetailedText());
            }
        }
    }

    private void runPreValidations() {
        for (Validation v : preValidations) {
            if (!v.validate(this)) {
                setWrongText(v.getWrongText());
                wrong();
                throw new ModelInputErrorException(v.getDetailedText());
            }
        }
    }
}

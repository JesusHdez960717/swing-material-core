package com.jhw.swing.material.components.textarea;

import com.jhw.swing.material.components.container.panel._PanelTransparent;
import com.jhw.swing.material.components.labels._MaterialLabel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.util.StringTokenizer;
import javax.swing.SwingConstants;
import com.jhw.swing.util.Utils;
import com.jhw.swing.material.standards.MaterialColors;
import com.jhw.swing.material.standards.MaterialFontRoboto;

/**
 *
 * @author Jesus Hernandez Barrios (jhernandezb96@gmail.com)
 */
public class _ContentArea extends _PanelTransparent {

    private String header = "";
    private Font headerFont = MaterialFontRoboto.BOLD.deriveFont(20);

    private String text = "";
    private Font textFont = MaterialFontRoboto.REGULAR.deriveFont(16);

    private Color backColor = MaterialColors.WHITE;

    private int textHorizontalAlignment = SwingConstants.LEFT;

    public _ContentArea() {
        initComponents();
    }

    public _ContentArea(Color c, String text) {
        initComponents();

        setText(text);
    }

    public _ContentArea(String header, String text) {
        initComponents();
        setText(text);
        setHeader(header);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//
    private void initComponents() {

        setLayout(new java.awt.GridLayout(0, 1));
    }// </editor-fold>                        

    // Variables declaration - do not modify//:variables
    // End of variables declaration                   
    public String getHeader() {
        return header;
    }

    public void setHeader(String header) {
        this.header = header;
        updatePanel();
    }

    public int getTextHorizontalAlignment() {
        return textHorizontalAlignment;
    }

    public void setTextHorizontalAlignment(int textHorizontalAlignment) {
        this.textHorizontalAlignment = textHorizontalAlignment;
    }

    public Font getHeaderFont() {
        return headerFont;
    }

    public void setHeaderFont(Font headerFont) {
        this.headerFont = headerFont;
        updatePanel();
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
        updatePanel();
    }

    public Font getTextFont() {
        return textFont;
    }

    public void setTextFont(Font textFont) {
        this.textFont = textFont;
        updatePanel();
    }

    public Color getBackColor() {
        return backColor;
    }

    public void setBackColor(Color backColor) {
        this.backColor = backColor;
        updatePanel();
    }

    private void createLabels() {
        Color foreground = Utils.getForegroundAccording(backColor);

        this.removeAll();
        StringTokenizer stHeader = new StringTokenizer(this.header, "\n");
        while (stHeader.hasMoreTokens()) {
            String tok = stHeader.nextToken();
            _MaterialLabel label = new _MaterialLabel();
            label.setHorizontalAlignment(textHorizontalAlignment);
            label.setFont(this.headerFont);
            label.setText(tok);
            label.setForeground(foreground);
            this.add(label);
        }

        StringTokenizer stText = new StringTokenizer(this.text, "\n");
        while (stText.hasMoreTokens()) {
            String tok = stText.nextToken();
            _MaterialLabel label = new _MaterialLabel();
            label.setHorizontalAlignment(textHorizontalAlignment);
            label.setFont(this.textFont);
            label.setText(tok);
            label.setForeground(foreground);
            this.add(label);
        }
    }

    public void addText(String txt) {
        text += "\n";
        text += txt;
        updatePanel();
    }

    private void updatePanel() {
        int width = 0;
        int heigth = 0;

        //calculate header
        StringTokenizer stHeader = new StringTokenizer(this.header, "\n");
        while (stHeader.hasMoreTokens()) {
            String tok = stHeader.nextToken();
            FontMetrics fm = Utils.fontMetrics(this.headerFont);
            int tokW = fm.stringWidth(tok);
            width = Math.max(width, tokW);

            _MaterialLabel label = new _MaterialLabel();
            label.setFont(this.headerFont);
            label.setText(tok);
            heigth += label.getPreferredSize().getHeight();
        }

        //calculate text
        StringTokenizer stText = new StringTokenizer(this.text, "\n");
        while (stText.hasMoreTokens()) {
            String tok = stText.nextToken();
            FontMetrics fm = Utils.fontMetrics(this.textFont);
            int tokW = fm.stringWidth(tok);
            width = Math.max(width, tokW);

            _MaterialLabel label = new _MaterialLabel();
            label.setFont(this.textFont);
            label.setText(tok);
            heigth += label.getPreferredSize().getHeight();
        }
        this.setPreferredSize(new Dimension(width, heigth));
        createLabels();
    }

}
